name: Internal - Tests for "has-installed-dependencies" action

on:
  workflow_call:

permissions:
  contents: read

jobs:
  test:
    name: Test "has-installed-dependencies" (${{ matrix.working-directory }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - working-directory: tests/npm
            package-manager: npm
            lock-file: package-lock.json

          - working-directory: tests/pnpm
            package-manager: pnpm
            lock-file: pnpm-lock.yaml

          - working-directory: tests/pnpm-package-manager
            package-manager: pnpm
            lock-file: pnpm-lock.yaml

          - working-directory: tests/yarn
            package-manager: yarn
            lock-file: yarn.lock
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - id: setup-node
        uses: ./actions/setup-node
        with:
          working-directory: ${{ matrix.working-directory }}

      - name: Check that package manager is the expected one
        id: check-package-manager
        run: |
          if [[ "${{ steps.setup-node.outputs.run-script-command }}" != "${{ matrix.package-manager }}"* ]]; then
            echo "Package manager is not ${{ matrix.package-manager }}"
            exit 1
          fi

      - id: has-installed-dependencies
        uses: ./actions/has-installed-dependencies
        with:
          working-directory: ${{ matrix.working-directory }}
          dependencies: |
            gatsby
            jest
            nx
            prettier
            storybook
            unknown

      - name: Check "has-installed-dependencies" outputs
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const assert = require("assert");

            const installedDependenciesOutput = `${{ steps.has-installed-dependencies.outputs.installed-dependencies }}`;
            assert(installedDependenciesOutput.length, `"installed-dependencies" output is empty`);

            // Check if is valid JSON
            let installedDependencies = null;
            try {
              installedDependencies = JSON.parse(installedDependenciesOutput);
            } catch (error) {
              throw new Error(`"installed-dependencies" output is not a valid JSON: ${error}`);
            }

            const expectedResult = {
              gatsby: true,
              jest: true,
              nx: true,
              prettier: true,
              storybook: true,
              unknown: false,
            };

            assert.equal(
              JSON.stringify(installedDependencies),
              JSON.stringify(expectedResult),
              `"installed-dependencies" output is not valid`
            );
