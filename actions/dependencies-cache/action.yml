name: "Dependencies cache"
description: "Action to setup dependencies cache managment."
author: Hoverkraft
branding:
  icon: archive
  color: gray-dark

inputs:
  dependencies:
    description: "List of dependencies for which the cache should be managed."
    required: true
  working-directory:
    description: |
      Working directory where the dependencies are installed.
      Can be absolute or relative to the repository root.
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-dependencies-cache-action/ && cp -r $GITHUB_ACTION_PATH/../* ./self-dependencies-cache-action/

    - id: has-installed-dependencies
      if: inputs.dependencies != ''
      uses: ./self-dependencies-cache-action/has-installed-dependencies
      with:
        dependencies: ${{ inputs.dependencies }}
        working-directory: ${{ inputs.working-directory }}

    - id: get-package-manager
      if: inputs.package-manager == ''
      uses: ./self-dependencies-cache-action/get-package-manager
      with:
        working-directory: ${{ inputs.working-directory }}

    - name: ♻️ NX cache
      if: fromJson(steps.has-installed-dependencies.outputs.installed-dependencies).nx == true
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ inputs.working-directory }}/node_modules/.cache/nx
        key: ${{ runner.os }}-cache-nx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cache-nx-

    - name: ♻️ Prettier cache
      if: fromJson(steps.has-installed-dependencies.outputs.installed-dependencies).prettier == true
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ inputs.working-directory }}/node_modules/.cache/prettier
        key: ${{ runner.os }}-cache-prettier-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cache-prettier-

    - name: ♻️ Gatsby cache
      if: fromJson(steps.has-installed-dependencies.outputs.installed-dependencies).gatsby == true
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: |
          ${{ inputs.working-directory }}/.cache
          ${{ inputs.working-directory }}/public
        key: ${{ runner.os }}-cache-gatsby-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cache-gatsby-

    - name: ♻️ Storybook cache
      if: fromJson(steps.has-installed-dependencies.outputs.installed-dependencies).storybook == true
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ inputs.working-directory }}/node_modules/.cache/storybook
        key: ${{ runner.os }}-cache-storybook-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cache-storybook-

    - name: ♻️ Get Jest cache dir
      id: jest-cache-dir-path
      if: fromJson(steps.has-installed-dependencies.outputs.installed-dependencies).jest == true
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        PACKAGE_MANAGER: ${{ steps.get-package-manager.outputs.package-manager }}
      with:
        # jscpd:ignore-start
        script: |
          const fs = require('node:fs');
          const path = require('node:path');

          let workingDirectory = process.env.WORKING_DIRECTORY || '.';
          if (!path.isAbsolute(workingDirectory)) {
            workingDirectory = path.join(process.env.GITHUB_WORKSPACE, workingDirectory);
          }

          if (!fs.existsSync(workingDirectory)) {
            core.setFailed(`The specified working directory does not exist: ${workingDirectory}`);
            return;
          }

          workingDirectory = path.resolve(workingDirectory);
          core.debug(`Running in working directory: ${workingDirectory}`);
          process.chdir(workingDirectory);

          const packageManager = process.env.PACKAGE_MANAGER;
          if (!packageManager) {
            core.setFailed('Unable to determine package manager');
            return;
          }
          core.debug(`Using package manager: ${packageManager}`);

          const commandArgs = packageManager === 'npm'
            ? ['exec', 'jest', '--', '--showConfig']
            : ['jest', '--showConfig'];

          let execResult;
          try {
            execResult = await exec.getExecOutput(packageManager, commandArgs, { cwd: workingDirectory });
          } catch (error) {
            core.setFailed(`Unable to get Jest config: ${error.message}`);
            return;
          }

          if (execResult.exitCode !== 0) {
            const errorMessage = execResult.stderr?.trim() || execResult.stdout?.trim();
            core.setFailed(`Unable to get Jest config (exit code ${execResult.exitCode}): ${errorMessage}`);
            return;
          }

          const jestConfigRaw = execResult.stdout.trim();

          if (!jestConfigRaw) {
            core.setFailed('Unable to get Jest config');
            return;
          }

          core.debug(`Jest config: ${jestConfigRaw}`);

          // Find cacheDirectory in the config with regex
          const cacheDirMatch = jestConfigRaw.match(/"cacheDirectory"\s*:\s*"([^"]+)"/);
          if (!cacheDirMatch || cacheDirMatch.length < 2) {
            core.setFailed('Unable to find cacheDirectory in Jest config');
            return;
          }

          let jestCacheDir = cacheDirMatch[1];
          if (!path.isAbsolute(jestCacheDir)) {
            jestCacheDir = path.join(workingDirectory, jestCacheDir);
          }
          jestCacheDir = path.resolve(jestCacheDir);

          core.debug(`Jest cache directory: ${jestCacheDir}`);
          core.setOutput('dir', jestCacheDir);
        # jscpd:ignore-end

    - name: ♻️ Test cache
      if: steps.jest-cache-dir-path.outputs.dir
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ steps.jest-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-test-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-test-

    # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
    - shell: bash
      if: always()
      run: |
        rm -fr ./self-dependencies-cache-action
