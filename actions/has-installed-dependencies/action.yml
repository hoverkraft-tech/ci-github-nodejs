name: "Has installed dependencies"
description: "Action to check if dependencies have been installed according to the package manager used."
author: Hoverkraft
branding:
  icon: settings
  color: gray-dark

inputs:
  dependencies:
    description: "The dependencies to check."
    required: true
  working-directory:
    description: "Working directory where the dependencies are installed."
    required: false
    default: "."

outputs:
  installed-dependencies:
    description: "A map of dependencies and the status weither they have been installed or not."
    value: ${{ steps.has-dependencies.outputs.installed-dependencies }}

runs:
  using: "composite"
  steps:
    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-actions/ && cp -r $GITHUB_ACTION_PATH/../* ./self-actions/

    - id: get-package-manager
      if: inputs.package-manager == ''
      uses: ./self-actions/get-package-manager
      with:
        working-directory: ${{ inputs.working-directory }}

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: |
        rm -fr ./self-actions

    - id: has-dependencies
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const dependenciesPatterns = {
            storybook: /@storybook\/[-a-z]+/,
            nx: /@nx\/[-a-z]+/,
          };

          const dependencies = `${{ inputs.dependencies }}`.split('\n').map(x => x.trim()).filter(x => x !== '');

          const hasDependencies = Object.fromEntries(dependencies.map(dependency => [dependency, false]));

          const setHasDependencies = (dependency) => {
            for (const dependencyName of Object.keys(hasDependencies)) {
              if (hasDependencies[dependencyName]) {
                continue;
              }

              if (dependencyName === dependency) {
                hasDependencies[dependencyName] = true;
                continue;
              }

              if (dependenciesPatterns[dependencyName] && dependenciesPatterns[dependencyName].test(dependency)) {
                hasDependencies[dependencyName] = true;
                continue;
              }
            }
          };

          const parseNpmDependencies = (dependencies) => {
            for (const dependencyName of Object.keys(dependencies)) {
              const dependency = dependencies[dependencyName];
              setHasDependencies(dependencyName);

              if (Object.values(hasDependencies).every(Boolean)) {
                break;
              }

              if (dependency.dependencies) {
                parseNpmDependencies(dependency.dependencies);
              }
            }
          };

          const parseYarnDependencies = (dependencies) => {
            for (const dependency of dependencies.data.trees) {

              const dependencyName = dependency.name.split('@').slice(0, -1).join('@');
              setHasDependencies(dependencyName);

              if (Object.values(hasDependencies).every(Boolean)) {
                break;
              }
            }
          };

          const parseDependencies = async (command) => {
            const { stdout } = await exec.getExecOutput(command, undefined, {
              cwd: `${{ inputs.working-directory }}` || undefined,
            });

            if (stdout === '') {
              return;
            }

            const allInstalledDependencies = JSON.parse(stdout);

            return allInstalledDependencies;
          }

          let allInstalledDependencies, parser;
          switch (`${{ steps.get-package-manager.outputs.package-manager }}`) {
            case 'npm':
              allInstalledDependencies = await parseDependencies(
                `${{ steps.get-package-manager.outputs.package-manager }} list --depth=1 --json --no-progress --pattern="${dependencies.join('|')}" --non-interactive`
              );
              allInstalledDependencies = allInstalledDependencies?.dependencies;
              parser = parseNpmDependencies;
              break;

            case 'pnpm':
              allInstalledDependencies = await parseDependencies(
                `${{ steps.get-package-manager.outputs.package-manager }} list --depth=1 --json --no-color`
              );
              (allInstalledDependencies || []).reduce((accumulator, currentValue) => {
                return { ...accumulator, ...(currentValue?.dependencies || {}) };
              }, []);
              parser = parseNpmDependencies;
              break;

            case 'yarn':
              allInstalledDependencies = await parseDependencies(
                `${{ steps.get-package-manager.outputs.package-manager }} list --depth=1 --json --no-progress --pattern="${dependencies.join('|')}" --non-interactive`
              );
              parser = parseYarnDependencies;
              break;

            default:
              throw new Error(`Unsupported package manager: ${{ steps.get-package-manager.outputs.package-manager }}`);
          }

          if (allInstalledDependencies) {
            await parser(allInstalledDependencies);
          }

          core.setOutput('installed-dependencies', hasDependencies);
