name: "Setup Node.js"
description: "Action to setup Node.js and install dependencies according to the package manager used."
author: Hoverkraft
branding:
  icon: settings
  color: gray-dark

inputs:
  dependencies-cache:
    description: "List of dependencies for which the cache should be managed"
    required: false
    default: ""
  working-directory:
    description: |
      Working directory where the dependencies are installed.
      Can be absolute or relative to the repository root.
    required: false
    default: "."

outputs:
  run-script-command:
    description: "The command to run a script in the package.json file"
    value: ${{ steps.get-package-manager.outputs.run-script-command }}
runs:
  using: "composite"
  steps:
    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-setup-node-action/ && cp -r $GITHUB_ACTION_PATH/../* ./self-setup-node-action/

    - id: get-package-manager
      if: inputs.package-manager == ''
      uses: ./self-setup-node-action/get-package-manager
      with:
        working-directory: ${{ inputs.working-directory }}

    - id: get-node-version-file
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
      with:
        # jscpd:ignore-start
        script: |
          const path = require('node:path');
          const fs = require('node:fs');

          let workingDirectory = process.env.WORKING_DIRECTORY || '.';
          if (!path.isAbsolute(workingDirectory)) {
            workingDirectory = path.join(process.env.GITHUB_WORKSPACE, workingDirectory);
          }

          if (!fs.existsSync(workingDirectory)) {
            core.setFailed(`The specified working directory does not exist: ${workingDirectory}`);
            return;
          }

          workingDirectory = path.resolve(workingDirectory);
          core.debug(`Running in working directory: ${workingDirectory}`);
          process.chdir(workingDirectory);

          const candidates = ['.nvmrc', '.node-version'];

          for (const fileName of candidates) {
            const candidatePath = path.resolve(workingDirectory, fileName);

            if (!fs.existsSync(candidatePath)) {
              continue;
            }

            const relativePath = path.relative(process.env.GITHUB_WORKSPACE, candidatePath);
            core.debug(`Found Node version file: ${relativePath}`);
            core.setOutput('node-version-file', relativePath);
            return;
          }

          core.debug('No Node version file found in supported list');
        # jscpd:ignore-end

    # FIXME: workaround until will be merged: https://github.com/actions/setup-node/pull/901
    - id: get-pnpm-version
      if: steps.get-package-manager.outputs.package-manager == 'pnpm'
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
      with:
        script: |
          const path = require('node:path');
          const fs = require('node:fs');

          let workingDirectory = process.env.WORKING_DIRECTORY || '.';
          if (!path.isAbsolute(workingDirectory)) {
            workingDirectory = path.join(process.env.GITHUB_WORKSPACE, workingDirectory);
          }

          if (!fs.existsSync(workingDirectory)) {
            core.setFailed(`The specified working directory does not exist: ${workingDirectory}`);
            return;
          }

          workingDirectory = path.resolve(workingDirectory);
          core.debug(`Running in working directory: ${workingDirectory}`);
          process.chdir(workingDirectory);

          let packageJsonPath = path.join(workingDirectory, 'package.json');
          if (!fs.existsSync(packageJsonPath)) {
            core.debug(`package.json not found in working directory "${workingDirectory}"; defaulting pnpm version to latest`);
            core.setOutput('pnpm-version', 'latest');
            return;
          }
          packageJsonPath = path.resolve(packageJsonPath);

          let packageJson;
          try {
            const fileContent = fs.readFileSync(packageJsonPath, 'utf8');
            packageJson = JSON.parse(fileContent);
          } catch (error) {
            core.setFailed(`Unable to read ${packageJsonPath} to determine pnpm version: ${error.message}`);
            return;
          }

          const packageManagerField = (packageJson?.packageManager ?? '').trim();

          if (packageManagerField) {
            core.debug('package.json defines packageManager; pnpm/action-setup will use it');
            return;
          }

          core.debug('packageManager field missing; defaulting pnpm version to latest');
          core.setOutput('pnpm-version', 'latest');

    - uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
      if: steps.get-package-manager.outputs.package-manager == 'pnpm'
      with:
        version: ${{ steps.get-pnpm-version.outputs.pnpm-version }}
        package_json_file: ${{ inputs.working-directory }}/package.json
        run_install: false

    - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version-file: ${{ steps.get-node-version-file.outputs.node-version-file }}
        cache: ${{ steps.get-package-manager.outputs.package-manager }}
        cache-dependency-path: ${{ steps.get-package-manager.outputs.cache-dependency-path }}

    - shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ${{ steps.get-package-manager.outputs.install-command }}

    - if: inputs.dependencies-cache != ''
      uses: ./self-setup-node-action/dependencies-cache
      with:
        dependencies: ${{ inputs.dependencies-cache }}
        working-directory: ${{ inputs.working-directory }}

    # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
    - shell: bash
      if: always()
      run: |
        rm -fr ./self-setup-node-action
