name: "Get package manager"
description: "Action to detect the package manager used. Supports Yarn, pnpm, and npm"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

inputs:
  working-directory:
    description: |
      Working directory where the dependencies are installed.
      Can be absolute or relative to the repository root.
    required: false
    default: "."

outputs:
  package-manager:
    description: "The package manager used."
    value: ${{ steps.get-package-manager.outputs.package-manager }}
  cache-dependency-path:
    description: "The path to the dependency file for cache management."
    value: ${{ steps.get-package-manager.outputs.cache-dependency-path }}
  install-command:
    description: "The command to install dependencies."
    value: ${{ steps.get-package-manager.outputs.install-command }}
  run-script-command:
    description: "The command to run a script in the package.json file."
    value: ${{ steps.get-package-manager.outputs.run-script-command }}

runs:
  using: "composite"
  steps:
    - id: get-package-manager
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
      with:
        # jscpd:ignore-start
        script: |
          const fs = require('node:fs');
          const path = require('node:path');

          let workingDirectory = process.env.WORKING_DIRECTORY || '.';
          if (!path.isAbsolute(workingDirectory)) {
            workingDirectory = path.join(process.env.GITHUB_WORKSPACE, workingDirectory);
          }

          if (!fs.existsSync(workingDirectory)) {
            core.setFailed(`The specified working directory does not exist: ${workingDirectory}`);
            return;
          }

          workingDirectory = path.resolve(workingDirectory);
          core.debug(`Running in working directory: ${workingDirectory}`);
          process.chdir(workingDirectory);

          let packageManagerName = '';
          const packageJsonPath = path.join(workingDirectory, 'package.json');

          if (fs.existsSync(packageJsonPath)) {
            try {
              const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
              const packageManager = packageJson?.packageManager;

              if (typeof packageManager === 'string' && packageManager.trim() !== '') {
                packageManagerName = packageManager.split('@')[0];
              }
            } catch (error) {
              core.warning(`Failed to parse package.json: ${error.message}`);
            }
          }

          core.debug(`Package manager from package.json: ${packageManagerName}`);

          if (!packageManagerName) {
            const lockFiles = [
              { file: 'yarn.lock', name: 'yarn' },
              { file: 'pnpm-lock.yaml', name: 'pnpm' },
              { file: 'package-lock.json', name: 'npm' },
            ];

            const detectedLockFile = lockFiles.find(({ file }) => fs.existsSync(path.join(workingDirectory, file)));

            if (!detectedLockFile) {
              core.setFailed('Unable to detect package manager');
              return;
            }

            packageManagerName = detectedLockFile.name;
            core.debug(`Package manager from lock files: ${packageManagerName}`);
          }

          const relativeWorkingDirectory = path.relative(process.env.GITHUB_WORKSPACE, workingDirectory) || '.';

          const packageManagerConfig = {
            yarn: {
              cacheDependencyPath: `${relativeWorkingDirectory}/**/yarn.lock`,
              installCommand: 'yarn install --frozen-lockfile',
              runScriptCommand: 'yarn',
            },
            pnpm: {
              cacheDependencyPath: `${relativeWorkingDirectory}/**/pnpm-lock.yaml`,
              installCommand: 'pnpm install --frozen-lockfile',
              runScriptCommand: 'pnpm',
            },
            npm: {
              cacheDependencyPath: `${relativeWorkingDirectory}/**/package-lock.json`,
              installCommand: 'npm ci',
              runScriptCommand: 'npm run',
            },
          };

          const managerConfig = packageManagerConfig[packageManagerName];

          if (!managerConfig) {
            core.setFailed(`Package manager ${packageManagerName} is not supported`);
            return;
          }

          core.setOutput('package-manager', packageManagerName);
          core.setOutput('cache-dependency-path', managerConfig.cacheDependencyPath);
          core.setOutput('install-command', managerConfig.installCommand);
          core.setOutput('run-script-command', managerConfig.runScriptCommand);
        # jscpd:ignore-end
