name: "Get package manager"
description: "Action to detect the package manager used. Supports Yarn and npm"
author: Hoverkraft
branding:
  icon: package
  color: gray-dark

inputs:
  working-directory:
    description: "Working directory where the dependencies are installed."
    required: false
    default: "."

outputs:
  package-manager:
    description: "The package manager used."
    value: ${{ steps.get-package-manager.outputs.package-manager }}
  cache-dependency-path:
    description: "The path to the dependency file for cache management."
    value: ${{ steps.get-package-manager.outputs.cache-dependency-path }}
  install-command:
    description: "The command to install dependencies."
    value: ${{ steps.get-package-manager.outputs.install-command }}
  run-script-command:
    description: "The command to run a script in the package.json file."
    value: ${{ steps.get-package-manager.outputs.run-script-command }}

runs:
  using: "composite"
  steps:
    - id: get-package-manager
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::debug::::Running in working directory: $(pwd)";

        # Check if the package manager is set in package.json
        PACKAGE_MANAGER_NAME=""
        if [ -f "package.json" ]; then
          PACKAGE_MANAGER=$(jq -r '.packageManager//empty' package.json)
          if [ -n "$PACKAGE_MANAGER" ]; then
            # Extract the package manager and version from the packageManager field
            PACKAGE_MANAGER_NAME=$(echo "$PACKAGE_MANAGER" | cut -d'@' -f1)
          fi
        fi

        echo "::debug::Package manager from package.json: $PACKAGE_MANAGER_NAME";

        if [ -z "$PACKAGE_MANAGER_NAME" ]; then
          if [ -f "yarn.lock" ]; then
            PACKAGE_MANAGER_NAME="yarn"
          elif [ -f "pnpm-lock.yaml" ]; then
            PACKAGE_MANAGER_NAME="pnpm"
          elif [ -f "package-lock.json" ]; then
            PACKAGE_MANAGER_NAME="npm"
          fi

          if [ -z "$PACKAGE_MANAGER_NAME" ]; then
            echo "::error ::Unable to detect package manager";
            exit 1;
          fi
          echo "::debug::Package manager from lock files: $PACKAGE_MANAGER_NAME";
        fi

        echo "package-manager=$PACKAGE_MANAGER_NAME" >> "$GITHUB_OUTPUT";

        case "$PACKAGE_MANAGER_NAME" in
          yarn)
            echo "cache-dependency-path=**/yarn.lock" >> "$GITHUB_OUTPUT";
            echo "install-command=yarn install --frozen-lockfile" >> "$GITHUB_OUTPUT";
            echo "run-script-command=yarn" >> "$GITHUB_OUTPUT";
            exit 0;
            ;;
          pnpm)
            echo "cache-dependency-path=**/pnpm-lock.yaml" >> "$GITHUB_OUTPUT";
            echo "install-command=pnpm install --frozen-lockfile" >> "$GITHUB_OUTPUT";
            echo "run-script-command=pnpm" >> "$GITHUB_OUTPUT";
            exit 0;
            ;;
          npm)
            echo "cache-dependency-path=**/package-lock.json" >> "$GITHUB_OUTPUT";
            echo "install-command=npm ci" >> "$GITHUB_OUTPUT";
            echo "run-script-command=npm run" >> "$GITHUB_OUTPUT";
            exit 0;
            ;;
          *)
            echo "::error ::Package manager $PACKAGE_MANAGER_NAME is not supported";
            exit 1;
            ;;
        esac
